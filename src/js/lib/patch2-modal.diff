@@ -48,8 +48,8 @@ function stateContext(el) {
   *
   * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
   */
 -$StateRefDirective.$inject = ['$state', '$timeout'];
 -function $StateRefDirective($state, $timeout) {
 +$StateRefDirective.$inject = ['$rootScope', '$state', '$timeout'];
 +function $StateRefDirective($rootScope, $state, $timeout) {
    return {
      restrict: 'A',
      require: '?^uiSrefActive',
 @@ -58,6 +58,7 @@ function $StateRefDirective($state, $timeout) {
        var params = null, url = null, base = stateContext(element) || $state.$current;
        var isForm = element[0].nodeName === "FORM";
        var attr = isForm ? "action" : "href", nav = true;
 +      var state = $state.get(ref.state, stateContext(element));
  
        var update = function(newVal) {
          if (newVal) params = newVal;
          if (!nav) return;
  
          var newHref = $state.href(ref.state, params, { relative: base });
  
          if (!newHref) {
            nav = false;
            return false;
          }
          element[0][attr] = newHref;
 -        if (uiSrefActive) {
 -          uiSrefActive.$$setStateInfo(ref.state, params);
 -        }
        };
  
        if (ref.paramExpr) {
 @@ -83,6 +81,9 @@ function $StateRefDirective($state, $timeout) {
        }
        update();
  
 +      $rootScope.$on('$stateChangeSuccess', checkNotifySrefActive);      
 +      checkNotifySrefActive();
 +
        if (isForm) return;
  
        element.bind("click", function(e) {
          var button = e.which || e.button;
          if ((button === 0 || button == 1) && !e.ctrlKey && !e.metaKey && !e.shiftKey && !element.attr('target')) {
            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
            $timeout(function() {
              $state.go(ref.state, params, { relative: base });
            });
            e.preventDefault();
          }
        });
 +      
 +      function checkNotifySrefActive() {        
 +        if(uiSrefActive && $state.$current.self === state && matchesParams()) {
 +          uiSrefActive.$$activate(0);
 +        }
 +
 +        function matchesParams() {
 +          return !params || equalForKeys(params, $state.params);
 +        }
 +      }
      }
    };
  }
 @@ -106,20 +117,20 @@
   * @requires ui.router.state.$state
   * @requires ui.router.state.$stateParams
   * @requires $interpolate
   *
   * @restrict A
   *
   * @description
   * A directive working alongside ui-sref to add classes to an element when the 
   * related ui-sref directive's state is active, and removing them when it is inactive.
   * The primary use-case is to simplify the special appearance of navigation menus 
   * relying on `ui-sref`, by having the "active" state's menu button appear different,
   * distinguishing it from the inactive menu items.
   *
   * @example
   * <pre>
   * <ul>
   *   <li ui-sref-active="active" class="item active">
   *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
   *   </li>
   *   <!-- ... -->
   * </ul>
   * </pre>
   */
 -$StateActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
 -function $StateActiveDirective($state, $stateParams, $interpolate) {
 +$StateActiveDirective.$inject = ['$rootScope', '$state', '$stateParams'];
 +function $StateActiveDirective($rootScope, $state, $stateParams) {
    return {
      restrict: "A",
      controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
 -      var state, params, activeClass;
 +      var classes, parentCtrl;
 +
 +      // Check for | and split
 +      classes = $attrs.uiSrefActive.split('|');
  
 -      // There probably isn't much point in $observing this
 -      activeClass = $interpolate($attrs.uiSrefActive || '', false)($scope);
 +      // Get the parent uiSrefActive, if any
 +      parentCtrl = $element.parent().controller('uiSrefActive');
 +      
 +      // Clear any classes before changing state
 +      $rootScope.$on('$stateChangeStart', removeActiveClasses);
  
        // Allow uiSref to communicate with uiSrefActive
 -      this.$$setStateInfo = function(newState, newParams) {
 -        state = $state.get(newState, stateContext($element));
 -        params = newParams;
 -        update();
 +      this.$$activate = function(level) {
 +        $element.addClass(classes[0]);
 +        if(level > 0 && classes.length > 1) {
 +          $element.addClass(classes[1]);
 +        }
 +        if(parentCtrl) {
 +          parentCtrl.$$activate(++level);
 +        }
        };
  
 -      $scope.$on('$stateChangeSuccess', update);
 -
 -      // Update route state
 -      function update() {
 -        if ($state.$current.self === state && matchesParams()) {
 -          $element.addClass(activeClass);
 -        } else {
 -          $element.removeClass(activeClass);
 +      // Remove classes that might have been added by this attribute
 +      function removeActiveClasses() {
 +        $element.removeClass(classes[0]);
 +        if(classes.length > 1) {
 +          $element.removeClass(classes[1]);
          }
 -      }
 -
 -      function matchesParams() {
 -        return !params || equalForKeys(params, $stateParams);
 -      }
 +      }      
      }]
    };
  }

